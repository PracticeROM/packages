name: Deploy packages

on:
  workflow_dispatch:
    inputs:
      packages:
        description: 'Packages to build'
        default: 'archlinux/* debian/*'
        required: true
        type: string
  push:
    branches:
      - master

jobs:
  deploy-archlinux:
    name: Deploy Arch Linux packages

    runs-on: ubuntu-24.04

    container:
      image: archlinux:base-devel
      options: --cap-add=CAP_SYS_ADMIN -u 1001:1001
      volumes:
        - /etc/passwd:/etc/passwd:ro
        - /etc/group:/etc/group:ro
        - /etc/shadow:/etc/shadow:ro
        - /etc/gshadow:/etc/gshadow:ro
        - /etc/sudoers:/etc/sudoers:ro
        - /etc/sudoers.d:/etc/sudoers.d:ro

    steps:
      - name: Configure system
        shell: sudo sh -e {0}
        run: |
          umount /etc/passwd
          umount /etc/group
          umount /etc/shadow
          umount /etc/gshadow
          umount -l /etc/sudoers
          umount /etc/sudoers.d
          groupadd -g 1001 arch
          useradd -m -u 1001 -g 1001 arch
          echo 'arch ALL=(ALL:ALL) NOPASSWD:ALL' >> /etc/sudoers.d/arch
          chown -R arch:arch .

      - name: Update system
        run: |
          sudo pacman -Sy --noconfirm

      - name: Install system packages
        run: |
          sudo pacman -S --noconfirm git openssh

      - name: Configure user
        env:
          PKG_HOST: ${{ secrets.ARCH_HOST }}
          PKG_PORT: ${{ secrets.ARCH_PORT }}
          PKG_KEY: ${{ secrets.ARCH_KEY }}
        run: |
          USER=$(whoami)
          HOME=$(getent passwd ${USER} | cut -d: -f6)
          mkdir ~/.ssh
          printf "%s" "${PKG_KEY}" > ~/.ssh/id_rsa
          ssh-keyscan -t rsa -p "${PKG_PORT}" "${PKG_HOST}" > ~/.ssh/known_hosts
          chmod 0700 ~/.ssh
          chmod 0600 ~/.ssh/id_rsa ~/.ssh/known_hosts

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed packages
        if: ${{ github.event_name == 'push' }}
        id: changed-packages
        uses: tj-actions/changed-files@v46.0.5
        with:
          files: archlinux/*/**
          dir_names: true
          dir_names_max_depth: 2

      - name: Get list of packages to build
        id: list-packages
        env:
          INPUT_PACKAGES: ${{ inputs.packages }}
          CHANGED_PACKAGES: ${{ steps.changed-packages.outputs.all_changed_files }}
        run: |
          if [ "${GITHUB_EVENT_NAME}" == push ]; then
            echo "packages=${CHANGED_PACKAGES}" >> "${GITHUB_OUTPUT}"
          else
            pkgdir=archlinux
            shopt -s globstar
            for f in ${INPUT_PACKAGES}; do
              realpath -ms --relative-to . "${f}" | grep -E -o "^${pkgdir}/[^/]+(/|$)" | sed 's#/$##'
            done | sort | uniq | xargs echo "packages=" >> "${GITHUB_OUTPUT}"
          fi

      - name: Build packages
        id: build-packages
        env:
          PACKAGES: ${{ steps.list-packages.outputs.packages }}
        run: |
          pkg_files=()

          for pkg in ${PACKAGES}; do
            if [ ! -d ${pkg} ]; then continue; fi

            echo "::group::Build ${pkg}"
            makepkg -D ${pkg} -sc --noconfirm
            echo "::endgroup::"

            for file in ${pkg}/*.pkg.*; do
              if [ ! -f ${file} ]; then continue; fi

              pkg_files+=(${file})

              chmod 0664 ${file}
            done
          done

          echo "pkg_files=${pkg_files[@]}" >> "${GITHUB_OUTPUT}"

      - name: Synchronize package database
        if: ${{ steps.build-packages.outputs.pkg_files != '' }}
        env:
          PKG_HOST: ${{ secrets.ARCH_HOST }}
          PKG_PORT: ${{ secrets.ARCH_PORT }}
          PKG_USER: ${{ secrets.ARCH_USER }}
          PKG_ROOT: ${{ secrets.ARCH_ROOT }}
          PKG_DB: ${{ secrets.ARCH_DB }}
          PKG_FILES: ${{ steps.build-packages.outputs.pkg_files }}
        run: |
          ssh -p "${PKG_PORT}" "${PKG_USER}@${PKG_HOST}" dotlockfile -l "${PKG_ROOT}/${PKG_DB}".lock

          scp -P "${PKG_PORT}" "${PKG_USER}@${PKG_HOST}":"${PKG_ROOT}/${PKG_DB}".{db,files}.tar.gz .
          repo-add "${PKG_DB}.db.tar.gz" ${PKG_FILES}
          scp -P "${PKG_PORT}" ${PKG_FILES} "${PKG_USER}@${PKG_HOST}":"${PKG_ROOT}"
          scp -P "${PKG_PORT}" "${PKG_DB}".{db,files}.tar.gz "${PKG_USER}@${PKG_HOST}":"${PKG_ROOT}"

          for file in ${PKG_FILES} "${PKG_DB}".{db,files}; do
            ssh -p "${PKG_PORT}" "${PKG_USER}@${PKG_HOST}" gpg --detach-sign --yes "${PKG_ROOT}/$(basename "${file}")"
          done

          ssh -p "${PKG_PORT}" "${PKG_USER}@${PKG_HOST}" dotlockfile -u "${PKG_ROOT}/${PKG_DB}".lock


  deploy-debian:
    name: Deploy Debian packages

    runs-on: ubuntu-24.04

    steps:
      - name: Update system
        run: |
          sudo apt-get update

      - name: Install system packages
        run: |
          sudo apt-get install build-essential openssh-client

      - name: Configure user
        env:
          PKG_HOST: ${{ secrets.DEB_HOST }}
          PKG_PORT: ${{ secrets.DEB_PORT }}
          PKG_KEY: ${{ secrets.DEB_KEY }}
        run: |
          mkdir ~/.ssh
          printf "%s" "${PKG_KEY}" > ~/.ssh/id_rsa
          ssh-keyscan -t rsa -p "${PKG_PORT}" "${PKG_HOST}" > ~/.ssh/known_hosts
          chmod 0700 ~/.ssh
          chmod 0600 ~/.ssh/id_rsa ~/.ssh/known_hosts

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed packages
        if: ${{ github.event_name == 'push' }}
        id: changed-packages
        uses: tj-actions/changed-files@v46.0.5
        with:
          files: debian/*/**
          dir_names: true
          dir_names_max_depth: 2

      - name: Get list of packages to build
        id: list-packages
        env:
          INPUT_PACKAGES: ${{ inputs.packages }}
          CHANGED_PACKAGES: ${{ steps.changed-packages.outputs.all_changed_files }}
        run: |
          if [ "${GITHUB_EVENT_NAME}" == push ]; then
            echo "packages=${CHANGED_PACKAGES}" >> "${GITHUB_OUTPUT}"
          else
            pkgdir=debian
            shopt -s globstar
            for f in ${INPUT_PACKAGES}; do
              realpath -ms --relative-to . "${f}" | grep -E -o "^${pkgdir}/[^/]+(/|$)" | sed 's#/$##'
            done | sort | uniq | xargs echo "packages=" >> "${GITHUB_OUTPUT}"
          fi

      - name: Build packages
        id: build-packages
        env:
          PACKAGES: ${{ steps.list-packages.outputs.packages }}
        run: |
          pkg_files=()

          for pkg in ${PACKAGES}; do
            if [ ! -d ${pkg} ]; then continue; fi

            echo "::group::Build ${pkg}"
            (cd ${pkg} && sudo apt-get build-dep .)
            (cd ${pkg} && dpkg-buildpackage --build=binary --post-clean --no-sign)
            echo "::endgroup::"

            for file in debian/*.deb; do
              if [ ! -f ${file} ]; then continue; fi

              pkg_files+=(${file})

              chmod 0664 ${file}
            done
          done

          echo "pkg_files=${pkg_files[@]}" >> "${GITHUB_OUTPUT}"

      - name: Synchronize package database
        if: ${{ steps.build-packages.outputs.pkg_files != '' }}
        env:
          PKG_HOST: ${{ secrets.DEB_HOST }}
          PKG_PORT: ${{ secrets.DEB_PORT }}
          PKG_USER: ${{ secrets.DEB_USER }}
          PKG_ROOT: ${{ secrets.DEB_ROOT }}
          PKG_DIST: ${{ secrets.DEB_DIST }}
          PKG_COMP: ${{ secrets.DEB_COMP }}
          PKG_FILES: ${{ steps.build-packages.outputs.pkg_files }}
        run: |
          dist_root="${PKG_ROOT}"/dists/"${PKG_DIST}"
          pkg_dir="${dist_root}"/"${PKG_COMP}"

          ssh -p "${PKG_PORT}" "${PKG_USER}@${PKG_HOST}" dotlockfile -l "${dist_root}"/.lock

          scp -P "${PKG_PORT}" ${PKG_FILES} "${PKG_USER}@${PKG_HOST}":"${pkg_dir}"
          ssh -p "${PKG_PORT}" "${PKG_USER}@${PKG_HOST}" sh -es << EOF
            cd "${PKG_ROOT}"
            dpkg-scanpackages -m dists/"${PKG_DIST}/${PKG_COMP}" > "${pkg_dir}"/Packages

            cd "${dist_root}"
            rm -f Release InRelease
            cat Release.header > Release
            apt-ftparchive release . >> Release
            gpg --output InRelease --digest-algo SHA512 --clearsign Release
          EOF

          ssh -p "${PKG_PORT}" "${PKG_USER}@${PKG_HOST}" dotlockfile -u "${dist_root}"/.lock
